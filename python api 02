#crud concept
#create read update delete
#creat ->post /posts @app.post("/posts")
#read ->get /get-> /posts/:id @app.post("/posts{id}") /posts @app.post("/posts")
#update-> put/patch /posts/:id @app.put("/posts{id}")
#delete -> posts/:id @app.post("/posts/{id}")


#code in vs main
from importlib.resources import contents
from operator import truediv
from typing import Optional
from click import option
from fastapi import FastAPI
from fastapi.params import Body
from pydantic import BaseModel
from random import randrange

#create instance 
app = FastAPI()
#define the class
class Post(BaseModel):
    title: str
    content: str
    published: bool=True
    rating: Optional[int] = None
 
#store the data in memory 
  
my_posts=[{"title":"title of post1","content":"content of post1","id":1},{"title":"checkout","content":"phone","id":2}]  

@app.get("/")
async def root():
 return {"message":"welcome to personal digital online shopping "}

#retrive data
@app.get("/posts")
def get_posts():
    return {"data": "here it's your posts."}
    
@app.post("/posts")
def create_posts(post : Post):
    print(post)
    print(post.dict())
    return {"data":post}
    
    
  #save the post at memory
  #create the variable -->my_posts= [] ([]list and with its properties)
  #db it will create id
  #it's after class before the @app
  my_posts= [{"title": "title of post 1","content" :"content of post1","id":1}]
  
  
  #update create retrive data from the postman and update
  #convert padantic module to dictory 
  my_posts.appent(post.dict()) 
  #we need to have id for every entre due to we don't have a database therefore we used random import for id
  from random import randrange
  #post id convert to dictory
  post_dict =post.dict()
  #refer to id filed has been created
  post_dict['id']=randrange(0,1000000000)
  #sent back the post inculde the new id
  my_posts.append()
  return {"data":post_dict}
 
 #code below as update       
@app.post("/posts")
def create_posts(post : Post):
   post_dict=post.dict()
   post_dict['id] =randrange(0,1000000000)
   my_posts.append(post_dict)
  return {"data":post_dict}
   
