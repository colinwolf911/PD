 #changing code to play
 @app.get("/")
 def root():
 return{""message":"welcome to my api"}
  
  #any time change and it's needed to restart the service 
  #hit ctrl +c + enter to restart server 
  
  #reload by itself automative start server
  uvicorn main:app --reload 
  #then save now it's automative refresh
  
  
  #what is path operation 
  @app.get("/")-->(.)method (/")path
  def root():-->(root)function
     return{"message" : "hi there"}
     
  #retrive message   @ (instance) def (anyname you like)
  @app.get("/")
  def get_post():
      return{"data": "this is your posts"}
      
  #fastapi goes to find the first match path
  
  #any time change and it's needed to restart the service 
  #hit ctrl +c to restart server 
  
  
  #postman to test api
  
  #at postman pratice json
  #chose body raw
  
  {
  "title ": "personal digital online shopping ",
  "content" :"check out "
  }
  
  
  
  #in vs  to retrive the body data
  #dict=body(...)-->extract body to python dictories and store to -->payload (payload: dict=body(...))
  
 #in vs main import body
from fastapi.params import FastAPI

#extra main body from postman 
#code in vs as below
 @app.post("/createposts")
 def create_posts(payload: dict=body(...)):
    print(payload)
 return{""message":"succefully created the post."}
  

# get the bod details from postman to in vs main
 @app.post("/createposts")
 def create_posts(payload: dict=body(...)):
    print(payload)
 return{"new_post": f"title{payload['title']}content:{payload['content']}"}
 
 
 
 
##need schema
#in vs lib --> pydantic
#in vs main import pydantic 
from pydantic import BaseModel

#in vs main
#title str, content str,catagory post,boolean 
#define a class
app =FastAPI()

class Post(BaseModel):
  title: str
  content: str
  
#take this model to the app
#def create_posts(post: Post): --> refer to (...: Post) padantic model
@app.post("/createposts")
 def create_posts(new_post: Post): 
    print(new_post)
 return{"data":"new post"}
 
 #extra the properity
  def create_posts(new_post: Post): 
    print(new_post.title)
    
    
 
 #assigned property is option
 
